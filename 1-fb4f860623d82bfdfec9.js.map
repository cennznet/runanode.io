{"version":3,"sources":["webpack:///./node_modules/markdown-it/lib/common/utils.js","webpack:///./node_modules/gatsby-link/index.js","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","webpack:///./node_modules/@babel/runtime/helpers/extends.js","webpack:///./node_modules/uc.micro/categories/P/regex.js","webpack:///./node_modules/markdown-it/lib/ruler.js","webpack:///./node_modules/markdown-it/lib/token.js","webpack:///./node_modules/markdown-it/index.js","webpack:///./node_modules/markdown-it/lib/common/entities.js","webpack:///./node_modules/mdurl/index.js","webpack:///./node_modules/uc.micro/properties/Any/regex.js","webpack:///./node_modules/uc.micro/categories/Cc/regex.js","webpack:///./node_modules/uc.micro/categories/Z/regex.js","webpack:///./node_modules/markdown-it/lib/common/html_re.js","webpack:///./node_modules/markdown-it/lib/rules_inline/strikethrough.js","webpack:///./node_modules/markdown-it/lib/rules_inline/emphasis.js","webpack:///./node_modules/markdown-it/lib/index.js","webpack:///./node_modules/mdurl/encode.js","webpack:///./node_modules/mdurl/decode.js","webpack:///./node_modules/mdurl/format.js","webpack:///./node_modules/mdurl/parse.js","webpack:///./node_modules/uc.micro/index.js","webpack:///./node_modules/uc.micro/categories/Cf/regex.js","webpack:///./node_modules/markdown-it/lib/helpers/index.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_label.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_destination.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_title.js","webpack:///./node_modules/markdown-it/lib/renderer.js","webpack:///./node_modules/markdown-it/lib/parser_core.js","webpack:///./node_modules/markdown-it/lib/rules_core/normalize.js","webpack:///./node_modules/markdown-it/lib/rules_core/block.js","webpack:///./node_modules/markdown-it/lib/rules_core/inline.js","webpack:///./node_modules/markdown-it/lib/rules_core/linkify.js","webpack:///./node_modules/markdown-it/lib/rules_core/replacements.js","webpack:///./node_modules/markdown-it/lib/rules_core/smartquotes.js","webpack:///./node_modules/markdown-it/lib/rules_core/state_core.js","webpack:///./node_modules/markdown-it/lib/parser_block.js","webpack:///./node_modules/markdown-it/lib/rules_block/table.js","webpack:///./node_modules/markdown-it/lib/rules_block/code.js","webpack:///./node_modules/markdown-it/lib/rules_block/fence.js","webpack:///./node_modules/markdown-it/lib/rules_block/blockquote.js","webpack:///./node_modules/markdown-it/lib/rules_block/hr.js","webpack:///./node_modules/markdown-it/lib/rules_block/list.js","webpack:///./node_modules/markdown-it/lib/rules_block/reference.js","webpack:///./node_modules/markdown-it/lib/rules_block/heading.js","webpack:///./node_modules/markdown-it/lib/rules_block/lheading.js","webpack:///./node_modules/markdown-it/lib/rules_block/html_block.js","webpack:///./node_modules/markdown-it/lib/common/html_blocks.js","webpack:///./node_modules/markdown-it/lib/rules_block/paragraph.js","webpack:///./node_modules/markdown-it/lib/rules_block/state_block.js","webpack:///./node_modules/markdown-it/lib/parser_inline.js","webpack:///./node_modules/markdown-it/lib/rules_inline/text.js","webpack:///./node_modules/markdown-it/lib/rules_inline/newline.js","webpack:///./node_modules/markdown-it/lib/rules_inline/escape.js","webpack:///./node_modules/markdown-it/lib/rules_inline/backticks.js","webpack:///./node_modules/markdown-it/lib/rules_inline/link.js","webpack:///./node_modules/markdown-it/lib/rules_inline/image.js","webpack:///./node_modules/markdown-it/lib/rules_inline/autolink.js","webpack:///./node_modules/markdown-it/lib/rules_inline/html_inline.js","webpack:///./node_modules/markdown-it/lib/rules_inline/entity.js","webpack:///./node_modules/markdown-it/lib/rules_inline/balance_pairs.js","webpack:///./node_modules/markdown-it/lib/rules_inline/text_collapse.js","webpack:///./node_modules/markdown-it/lib/rules_inline/state_inline.js","webpack:///./node_modules/linkify-it/index.js","webpack:///./node_modules/linkify-it/lib/re.js","webpack:///./node_modules/punycode/punycode.js","webpack:///(webpack)/buildin/module.js","webpack:///./node_modules/markdown-it/lib/presets/default.js","webpack:///./node_modules/markdown-it/lib/presets/zero.js","webpack:///./node_modules/markdown-it/lib/presets/commonmark.js"],"names":["_hasOwnProperty","Object","prototype","hasOwnProperty","has","object","key","call","isValidEntityCode","c","fromCodePoint","surrogate1","surrogate2","String","fromCharCode","UNESCAPE_MD_RE","UNESCAPE_ALL_RE","RegExp","source","DIGITAL_ENTITY_TEST_RE","entities","__webpack_require__","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","&","<",">","\"","replaceUnsafeChar","ch","REGEXP_ESCAPE_RE","UNICODE_PUNCT_RE","exports","lib","mdurl","ucmicro","assign","obj","Array","slice","arguments","forEach","TypeError","keys","isString","toString","_class","unescapeMd","str","indexOf","replace","unescapeAll","match","escaped","entity","name","code","charCodeAt","test","toLowerCase","parseInt","replaceEntityPattern","escapeHtml","arrayReplaceAt","src","pos","newElements","concat","isSpace","isWhiteSpace","isMdAsciiPunct","isPunctChar","escapeRE","normalizeReference","trim","toUpperCase","_interopRequireDefault","__esModule","withPrefix","navigateTo","push","navigate","default","_objectWithoutPropertiesLoose2","_extends2","_inheritsLoose2","_assertThisInitialized2","_defineProperty2","_propTypes","_react","_router","_gatsby","path","normalizePath","NavLinkPropTypes","activeClassName","string","activeStyle","GatsbyLink","_React$Component","props","_this","this","_ref","isCurrent","className","filter","Boolean","join","style","IOSupported","window","IntersectionObserver","state","handleRef","bind","_proto","componentDidUpdate","prevProps","prevState","to","___loader","enqueue","parsePath","pathname","componentDidMount","ref","el","cb","io","_this2","innerRef","entries","entry","target","isIntersecting","intersectionRatio","unobserve","disconnect","observe","render","_this3","_this$props","_this$props$getProps","getProps","defaultGetProps","_onClick","onClick","_onMouseEnter","onMouseEnter","rest","prefixedTo","createElement","Link","e","hovering","button","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","preventDefault","Component","propTypes","func","isRequired","bool","_default","forwardRef","options","___navigate","console","warn","___push","___replace","dP","f","FProto","Function","nameRE","configurable","get","module","excluded","i","sourceKeys","length","_extends","apply","Ruler","__rules__","__cache__","__find__","__compile__","self","chains","rule","enabled","alt","altName","chain","fn","at","index","opt","Error","before","beforeName","ruleName","splice","after","afterName","enable","list","ignoreInvalid","isArray","result","idx","enableOnly","disable","getRules","chainName","Token","type","tag","nesting","attrs","map","level","children","content","markup","info","meta","block","hidden","attrIndex","len","attrPush","attrData","attrSet","value","attrGet","attrJoin","encode","decode","format","parse","open_tag","close_tag","HTML_TAG_RE","HTML_OPEN_CLOSE_TAG_RE","tokenize","silent","scanned","start","marker","scanDelims","delimiters","jump","token","tokens","end","open","can_open","close","can_close","postProcess","j","startDelim","endDelim","loneMarkers","max","pop","isStrong","utils","helpers","Renderer","ParserCore","ParserBlock","ParserInline","LinkifyIt","punycode","config","zero","commonmark","BAD_PROTO_RE","GOOD_DATA_RE","validateLink","url","RECODE_HOSTNAME_FOR","normalizeLink","parsed","hostname","protocol","toASCII","er","normalizeLinkText","toUnicode","MarkdownIt","presetName","inline","core","renderer","linkify","configure","set","presets","components","rules","ruler","rules2","ruler2","missed","use","plugin","args","env","State","process","parseInline","inlineMode","renderInline","encodeCache","exclude","keepEscaped","l","nextCode","cache","defaultChars","getEncodeCache","encodeURIComponent","componentChars","decodeCache","getDecodeCache","seq","b1","b2","b3","b4","chr","slashes","auth","port","search","hash","Url","protocolPattern","portPattern","simplePathPattern","unwise","autoEscape","nonHostChars","hostEndingChars","hostnamePartPattern","hostnamePartStart","hostlessProtocol","javascript","javascript:","slashedProtocol","http","https","ftp","gopher","file","http:","https:","ftp:","gopher:","file:","slashesDenoteHost","lowerProto","hec","split","simplePath","exec","proto","substr","atSign","hostEnd","lastIndexOf","host","parseHost","ipv6Hostname","hostparts","part","newpart","k","validParts","notHost","bit","unshift","qm","u","Any","Cc","Cf","P","Z","parseLinkLabel","parseLinkDestination","parseLinkTitle","disableNested","found","prevPos","labelEnd","posMax","oldPos","md","skipToken","ok","lines","default_rules","code_inline","slf","renderAttrs","code_block","fence","highlighted","tmpAttrs","tmpToken","langName","highlight","langPrefix","image","renderInlineAsText","renderToken","hardbreak","xhtmlOut","softbreak","breaks","text","html_block","html_inline","nextToken","needLf","_rules","Core","NEWLINES_RE","NULL_RE","tok","isLinkClose","currentToken","nodes","ln","lastPos","htmlLinkLevel","fullUrl","urlText","links","blockTokens","pretest","schema","lastIndex","RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","r","p","tm","replaceFn","replace_scoped","inlineTokens","inside_autolink","replace_rare","blkIdx","typographer","QUOTE_TEST_RE","QUOTE_RE","APOSTROPHE","replaceAt","process_inlines","t","thisLevel","item","lastChar","nextChar","isLastPunctChar","isNextPunctChar","isLastWhiteSpace","isNextWhiteSpace","canOpen","canClose","isSingle","stack","openQuote","closeQuote","OUTER","single","quotes","StateCore","startLine","endLine","line","hasEmptyLines","maxNesting","skipEmptyLines","sCount","blkIndent","tight","isEmpty","outTokens","lineMax","getLine","bMarks","eMarks","escapedSplit","escapes","backTicked","lastBackTick","substring","lineText","nextLine","columns","columnCount","aligns","tableLines","tbodyLines","tShift","last","getLines","params","mem","haveEndMarker","skipChars","skipSpaces","adjustTab","initial","lastLineEmpty","offset","oldBMarks","oldBSCount","oldIndent","oldParentType","oldSCount","oldTShift","spaceAfterMarker","terminate","terminatorRules","wasOutdented","oldLineMax","bsCount","parentType","cnt","skipBulletListMarker","skipOrderedListMarker","contentStart","indent","indentAfterMarker","isOrdered","itemLines","listLines","listTokIdx","markerCharCode","markerValue","oldLIndent","oldTight","posAfterMarker","prevEmptyEnd","isTerminatingParagraph","Number","Math","min","markTightParagraphs","_endLine","destEndPos","destEndLineNo","href","label","res","title","references","tmp","skipSpacesBack","skipCharsBack","block_names","HTML_SEQUENCES","html","StateBlock","s","indent_found","ddIndent","from","begin","keepLastLF","lineIndent","first","queue","lineStart","_rules2","pending","pushPending","isTerminatorChar","pmax","ESCAPED","matchStart","matchEnd","labelStart","parseReference","EMAIL_RE","AUTOLINK_RE","tail","linkMatch","emailMatch","lc","isLetter","DIGITAL_RE","NAMED_RE","lastDelim","currDelim","curr","StateInline","pendingLevel","canSplitWord","count","left_flanking","right_flanking","isFunction","defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","defaultSchemas","validate","re","src_auth","src_host_port_strict","src_path","//","no_http","src_domain","src_domain_root","src_port","src_host_terminator","mailto:","mailto","src_email_name","src_host_strict","tlds_2ch_src_re","tlds_default","compile","__opts__","tlds","__tlds__","untpl","tpl","src_tlds","onCompile","__tlds_replaced__","src_xn","email_fuzzy","tpl_email_fuzzy","link_fuzzy","tpl_link_fuzzy","link_no_ip_fuzzy","tpl_link_no_ip_fuzzy","host_fuzzy_test","tpl_host_fuzzy_test","aliases","schemaError","val","__compiled__","__schemas__","compiled","link","isRegExp","normalize","alias","slist","schema_test","src_ZPCc","schema_search","__index__","__text_cache__","resetScanCache","Match","shift","__last_index__","__schema__","raw","createMatch","schemas","reduce","acc","add","definition","m","ml","me","next","tld_pos","testSchemaAt","keepOld","sort","arr","reverse","opts","src_Any","src_Cc","src_Z","src_P","src_ZCc","src_pseudo_letter","src_ip4","src_host","tpl_host_fuzzy","tpl_host_no_ip_fuzzy","tpl_host_fuzzy_strict","tpl_host_port_fuzzy_strict","tpl_host_port_no_ip_fuzzy_strict","global","__WEBPACK_AMD_DEFINE_RESULT__","root","nodeType","freeGlobal","maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","overflow","not-basic","invalid-input","baseMinusTMin","floor","stringFromCharCode","error","RangeError","array","mapDomain","parts","ucs2decode","extra","output","counter","ucs2encode","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","input","out","basic","oldi","w","baseMinusT","codePoint","inputLength","n","bias","handledCPCount","basicLength","q","currentValue","handledCPCountPlusOne","qMinusT","version","ucs2","undefined","webpackPolyfill","deprecate","paths","defineProperty","enumerable"],"mappings":"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","file":"1-fb4f860623d82bfdfec9.js","sourcesContent":["// Utilities\n//\n'use strict';\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction isString(obj) { return _class(obj) === '[object String]'; }\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false; }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false; }\n  if (c === 0x0B) { return false; }\n  if (c >= 0x0E && c <= 0x1F) { return false; }\n  if (c >= 0x7F && c <= 0x9F) { return false; }\n  // out of range\n  if (c > 0x10FFFF) { return false; }\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\n\n\nvar UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code = 0;\n\n  if (has(entities, name)) {\n    return entities[name];\n  }\n\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ?\n      parseInt(name.slice(2), 16)\n    :\n      parseInt(name.slice(1), 10);\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) { return str; }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\n\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str; }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped; }\n    return replaceEntityPattern(match, entity);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true; }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*eslint-disable max-len*/\nvar UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return UNICODE_PUNCT_RE.test(ch);\n}\n\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // use .toUpperCase() instead of .toLowerCase()\n  // here to avoid a conflict with Object.prototype\n  // members (most notably, `__proto__`)\n  return str.trim().replace(/\\s+/g, ' ').toUpperCase();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib                 = {};\nexports.lib.mdurl           = require('mdurl');\nexports.lib.ucmicro         = require('uc.micro');\n\nexports.assign              = assign;\nexports.isString            = isString;\nexports.has                 = has;\nexports.unescapeMd          = unescapeMd;\nexports.unescapeAll         = unescapeAll;\nexports.isValidEntityCode   = isValidEntityCode;\nexports.fromCodePoint       = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml          = escapeHtml;\nexports.arrayReplaceAt      = arrayReplaceAt;\nexports.isSpace             = isSpace;\nexports.isWhiteSpace        = isWhiteSpace;\nexports.isMdAsciiPunct      = isMdAsciiPunct;\nexports.isPunctChar         = isPunctChar;\nexports.escapeRE            = escapeRE;\nexports.normalizeReference  = normalizeReference;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.withPrefix = withPrefix;\nexports.navigateTo = exports.replace = exports.push = exports.navigate = exports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _router = require(\"@reach/router\");\n\nvar _gatsby = require(\"gatsby\");\n\n/*global __PATH_PREFIX__ */\nfunction withPrefix(path) {\n  return normalizePath(__PATH_PREFIX__ + \"/\" + path);\n}\n\nfunction normalizePath(path) {\n  return path.replace(/\\/+/g, \"/\");\n}\n\nvar NavLinkPropTypes = {\n  activeClassName: _propTypes.default.string,\n  activeStyle: _propTypes.default.object // Set up IntersectionObserver\n\n};\n\nvar handleIntersection = function handleIntersection(el, cb) {\n  var io = new window.IntersectionObserver(function (entries) {\n    entries.forEach(function (entry) {\n      if (el === entry.target) {\n        // Check if element is within viewport, remove listener, destroy observer, and run link callback.\n        // MSEdge doesn't currently support isIntersecting, so also test for  an intersectionRatio > 0\n        if (entry.isIntersecting || entry.intersectionRatio > 0) {\n          io.unobserve(el);\n          io.disconnect();\n          cb();\n        }\n      }\n    });\n  }); // Add element to the observer\n\n  io.observe(el);\n};\n\nvar GatsbyLink =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(GatsbyLink, _React$Component);\n\n  function GatsbyLink(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this; // Default to no support for IntersectionObserver\n\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"defaultGetProps\", function (_ref) {\n      var isCurrent = _ref.isCurrent;\n\n      if (isCurrent) {\n        return {\n          className: [_this.props.className, _this.props.activeClassName].filter(Boolean).join(\" \"),\n          style: (0, _extends2.default)({}, _this.props.style, _this.props.activeStyle)\n        };\n      }\n\n      return null;\n    });\n    var IOSupported = false;\n\n    if (typeof window !== \"undefined\" && window.IntersectionObserver) {\n      IOSupported = true;\n    }\n\n    _this.state = {\n      IOSupported: IOSupported\n    };\n    _this.handleRef = _this.handleRef.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    return _this;\n  }\n\n  var _proto = GatsbyLink.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    // Preserve non IO functionality if no support\n    if (this.props.to !== prevProps.to && !this.state.IOSupported) {\n      ___loader.enqueue((0, _gatsby.parsePath)(this.props.to).pathname);\n    }\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    // Preserve non IO functionality if no support\n    if (!this.state.IOSupported) {\n      ___loader.enqueue((0, _gatsby.parsePath)(this.props.to).pathname);\n    }\n  };\n\n  _proto.handleRef = function handleRef(ref) {\n    var _this2 = this;\n\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    if (this.state.IOSupported && ref) {\n      // If IO supported and element reference found, setup Observer functionality\n      handleIntersection(ref, function () {\n        ___loader.enqueue((0, _gatsby.parsePath)(_this2.props.to).pathname);\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this3 = this;\n\n    var _this$props = this.props,\n        to = _this$props.to,\n        _this$props$getProps = _this$props.getProps,\n        getProps = _this$props$getProps === void 0 ? this.defaultGetProps : _this$props$getProps,\n        _onClick = _this$props.onClick,\n        _onMouseEnter = _this$props.onMouseEnter,\n        $activeClassName = _this$props.activeClassName,\n        $activeStyle = _this$props.activeStyle,\n        $innerRef = _this$props.innerRef,\n        state = _this$props.state,\n        replace = _this$props.replace,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props, [\"to\", \"getProps\", \"onClick\", \"onMouseEnter\", \"activeClassName\", \"activeStyle\", \"innerRef\", \"state\", \"replace\"]);\n    var LOCAL_URL = /^\\/(?!\\/)/;\n\n    if (process.env.NODE_ENV !== \"production\" && !LOCAL_URL.test(to)) {\n      console.warn(\"External link \" + to + \" was detected in a Link component. Use the Link component only for internal links. See: https://gatsby.app/internal-links\");\n    }\n\n    var prefixedTo = withPrefix(to);\n    return _react.default.createElement(_router.Link, (0, _extends2.default)({\n      to: prefixedTo,\n      state: state,\n      getProps: getProps,\n      innerRef: this.handleRef,\n      onMouseEnter: function onMouseEnter(e) {\n        if (_onMouseEnter) {\n          _onMouseEnter(e);\n        }\n\n        ___loader.hovering((0, _gatsby.parsePath)(to).pathname);\n      },\n      onClick: function onClick(e) {\n        if (_onClick) {\n          _onClick(e);\n        }\n\n        if (e.button === 0 && // ignore right clicks\n        !_this3.props.target && // let browser handle \"target=_blank\"\n        !e.defaultPrevented && // onClick prevented default\n        !e.metaKey && // ignore clicks with modifier keys...\n        !e.altKey && !e.ctrlKey && !e.shiftKey) {\n          e.preventDefault(); // Make sure the necessary scripts and data are\n          // loaded before continuing.\n\n          navigate(to, {\n            state: state,\n            replace: replace\n          });\n        }\n\n        return true;\n      }\n    }, rest));\n  };\n\n  return GatsbyLink;\n}(_react.default.Component);\n\nGatsbyLink.propTypes = (0, _extends2.default)({}, NavLinkPropTypes, {\n  innerRef: _propTypes.default.func,\n  onClick: _propTypes.default.func,\n  to: _propTypes.default.string.isRequired,\n  replace: _propTypes.default.bool\n});\n\nvar _default = _react.default.forwardRef(function (props, ref) {\n  return _react.default.createElement(GatsbyLink, (0, _extends2.default)({\n    innerRef: ref\n  }, props));\n});\n\nexports.default = _default;\n\nvar navigate = function navigate(to, options) {\n  window.___navigate(withPrefix(to), options);\n};\n\nexports.navigate = navigate;\n\nvar push = function push(to) {\n  console.warn(\"The \\\"push\\\" method is now deprecated and will be removed in Gatsby v3. Please use \\\"navigate\\\" instead.\");\n\n  window.___push(withPrefix(to));\n};\n\nexports.push = push;\n\nvar replace = function replace(to) {\n  console.warn(\"The \\\"replace\\\" method is now deprecated and will be removed in Gatsby v3. Please use \\\"navigate\\\" instead.\");\n\n  window.___replace(withPrefix(to));\n}; // TODO: Remove navigateTo for Gatsby v3\n\n\nexports.replace = replace;\n\nvar navigateTo = function navigateTo(to) {\n  console.warn(\"The \\\"navigateTo\\\" method is now deprecated and will be removed in Gatsby v3. Please use \\\"navigate\\\" instead.\");\n  return push(to);\n};\n\nexports.navigateTo = navigateTo;","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","module.exports=/[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n'use strict';\n\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (var i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = [ '' ];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return; }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return; }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return; }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  var index = this.__find__(name);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name); }\n\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var index = this.__find__(beforeName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var index = this.__find__(afterName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false; });\n\n  this.enable(list, ignoreInvalid);\n};\n\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\nmodule.exports = Ruler;\n","// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * fence infostring\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n","'use strict';\n\n\nmodule.exports = require('./lib/');\n","// HTML5 entities map: { name -> utf16string }\n//\n'use strict';\n\n/*eslint quotes:0*/\nmodule.exports = require('entities/maps/entities.json');\n","'use strict';\n\n\nmodule.exports.encode = require('./encode');\nmodule.exports.decode = require('./decode');\nmodule.exports.format = require('./format');\nmodule.exports.parse  = require('./parse');\n","module.exports=/[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/","module.exports=/[\\0-\\x1F\\x7F-\\x9F]/","module.exports=/[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/","// Regexps to match html elements\n\n'use strict';\n\nvar attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\n\nvar unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nvar single_quoted = \"'[^']*'\";\nvar double_quoted = '\"[^\"]*\"';\n\nvar attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\n\nvar attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\n\nvar open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\n\nvar close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nvar comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nvar processing  = '<[?].*?[?]>';\nvar declaration = '<![A-Z]+\\\\s+[^>]*>';\nvar cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\n\nvar HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')');\nvar HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;\nmodule.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n","// ~~strike through~~\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n  var i, scanned, token, len, ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x7E/* ~ */) { return false; }\n\n  scanned = state.scanDelims(state.pos, true);\n  len = scanned.length;\n  ch = String.fromCharCode(marker);\n\n  if (len < 2) { return false; }\n\n  if (len % 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n\n  for (i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch + ch;\n\n    state.delimiters.push({\n      marker: marker,\n      jump:   i,\n      token:  state.tokens.length - 1,\n      level:  state.level,\n      end:    -1,\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n  var i, j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      delimiters = state.delimiters,\n      max = state.delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue;\n    }\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    token         = state.tokens[startDelim.token];\n    token.type    = 's_open';\n    token.tag     = 's';\n    token.nesting = 1;\n    token.markup  = '~~';\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = 's_close';\n    token.tag     = 's';\n    token.nesting = -1;\n    token.markup  = '~~';\n    token.content = '';\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    i = loneMarkers.pop();\n    j = i + 1;\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n\n    j--;\n\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n};\n","// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // An amount of characters before this one that's equivalent to\n      // current one. In plain English: if this delimiter does not open\n      // an emphasis, neither do previous `jump` characters.\n      //\n      // Used to skip sequences like \"*****\" in one step, for 1st asterisk\n      // value will be 0, for 2nd it's 1 and so on.\n      //\n      jump:   i,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // Token level.\n      //\n      level:  state.level,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      delimiters = state.delimiters,\n      max = state.delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               delimiters[startDelim.end + 1].token === endDelim.token + 1 &&\n               delimiters[i - 1].marker === startDelim.marker;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n};\n","// Main parser class\n\n'use strict';\n\n\nvar utils        = require('./common/utils');\nvar helpers      = require('./helpers');\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt    = require('linkify-it');\nvar mdurl        = require('mdurl');\nvar punycode     = require('punycode');\n\n\nvar config = {\n  'default': require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\n\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n}\n\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.decode(mdurl.format(parsed));\n}\n\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(lang, str, true).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(lang, str, true).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers);\n\n\n  this.options = {};\n  this.configure(presetName);\n\n  if (options) { this.set(options); }\n}\n\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you with - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this, presetName;\n\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\n\n  if (presets.options) { self.set(presets.options); }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.enable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.disable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and returns list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n\n  var state = new this.core.State(src, this, env);\n\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n\n  state.inlineMode = true;\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\n\nmodule.exports = MarkdownIt;\n","\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","\n'use strict';\n\n\n/* eslint-disable no-bitwise */\n\nvar decodeCache = {};\n\nfunction getDecodeCache(exclude) {\n  var i, ch, cache = decodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = decodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    ch = exclude.charCodeAt(i);\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n  }\n\n  return cache;\n}\n\n\n// Decode percent-encoded string.\n//\nfunction decode(string, exclude) {\n  var cache;\n\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars;\n  }\n\n  cache = getDecodeCache(exclude);\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n    var i, l, b1, b2, b3, b4, chr,\n        result = '';\n\n    for (i = 0, l = seq.length; i < l; i += 3) {\n      b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n      if (b1 < 0x80) {\n        result += cache[b1];\n        continue;\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n        if ((b2 & 0xC0) === 0x80) {\n          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 3;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 6;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n          } else {\n            chr -= 0x10000;\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n          }\n\n          i += 9;\n          continue;\n        }\n      }\n\n      result += '\\ufffd';\n    }\n\n    return result;\n  });\n}\n\n\ndecode.defaultChars   = ';/?:@&=+$,#';\ndecode.componentChars = '';\n\n\nmodule.exports = decode;\n","\n'use strict';\n\n\nmodule.exports = function format(url) {\n  var result = '';\n\n  result += url.protocol || '';\n  result += url.slashes ? '//' : '';\n  result += url.auth ? url.auth + '@' : '';\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']';\n  } else {\n    result += url.hostname || '';\n  }\n\n  result += url.port ? ':' + url.port : '';\n  result += url.pathname || '';\n  result += url.search || '';\n  result += url.hash || '';\n\n  return result;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = [ '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t' ],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = [ '{', '}', '|', '\\\\', '^', '`' ].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = [ '\\'' ].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),\n    hostEndingChars = [ '/', '?', '#' ],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    /* eslint-disable no-script-url */\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n    /* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n  var i, l, lowerProto, hec, slashes,\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function(host) {\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nmodule.exports = urlParse;\n","'use strict';\n\nexports.Any = require('./properties/Any/regex');\nexports.Cc  = require('./categories/Cc/regex');\nexports.Cf  = require('./categories/Cf/regex');\nexports.P   = require('./categories/P/regex');\nexports.Z   = require('./categories/Z/regex');\n","module.exports=/[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/","// Just a shortcut for bulk export\n'use strict';\n\n\nexports.parseLinkLabel       = require('./parse_link_label');\nexports.parseLinkDestination = require('./parse_link_destination');\nexports.parseLinkTitle       = require('./parse_link_title');\n","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n'use strict';\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n  var level, found, marker, prevPos,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos;\n\n  state.pos = start + 1;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n\n  return labelEnd;\n};\n","// Parse link destination\n//\n'use strict';\n\n\nvar isSpace     = require('../common/utils').isSpace;\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkDestination(str, pos, max) {\n  var code, level,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */ || isSpace(code)) { return result; }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break; }\n      level--;\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return result; }\n  if (level !== 0) { return result; }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.lines = lines;\n  result.pos = pos;\n  result.ok = true;\n  return result;\n};\n","// Parse link title\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkTitle(str, pos, max) {\n  var code,\n      marker,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (pos >= max) { return result; }\n\n  marker = str.charCodeAt(pos);\n\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }\n\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) { marker = 0x29; }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n\n    pos++;\n  }\n\n  return result;\n};\n","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(tokens[idx].content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      highlighted, i, tmpAttrs, tmpToken;\n\n  if (info) {\n    langName = info.split(/\\s+/g)[0];\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .clone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[tokens[i].type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n'use strict';\n\n\nvar Ruler  = require('./ruler');\n\n\nvar _rules = [\n  [ 'normalize',      require('./rules_core/normalize')      ],\n  [ 'block',          require('./rules_core/block')          ],\n  [ 'inline',         require('./rules_core/inline')         ],\n  [ 'linkify',        require('./rules_core/linkify')        ],\n  [ 'replacements',   require('./rules_core/replacements')   ],\n  [ 'smartquotes',    require('./rules_core/smartquotes')    ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require('./rules_core/state_core');\n\n\nmodule.exports = Core;\n","// Normalize input string\n\n'use strict';\n\n\nvar NEWLINES_RE  = /\\r[\\n\\u0085]?|[\\u2424\\u2028\\u0085]/g;\nvar NULL_RE      = /\\u0000/g;\n\n\nmodule.exports = function inline(state) {\n  var str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n\n  state.src = str;\n};\n","'use strict';\n\n\nmodule.exports = function block(state) {\n  var token;\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0);\n    token.content  = state.src;\n    token.map      = [ 0, 1 ];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n};\n","'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens, tok, i, l;\n\n  // Parse inlines\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n};\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        for (ln = 0; ln < links.length; ln++) {\n\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n","// Simple typographyc replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// (p) (P) -> §\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n'use strict';\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - miltiplication 2 x 4 -> 2 × 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n\nvar SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  p: '§',\n  tm: '™'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n                    .replace(/\\+-/g, '±')\n                    // .., ..., ....... -> …\n                    // but ?..... & !..... -> ?.. & !..\n                    .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n                    .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n                    // em-dash\n                    .replace(/(^|[^-])---([^-]|$)/mg, '$1\\u2014$2')\n                    // en-dash\n                    .replace(/(^|\\s)--(\\s|$)/mg, '$1\\u2013$2')\n                    .replace(/(^|[^-\\s])--([^-\\s]|$)/mg, '$1\\u2013$2');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n\n  }\n};\n","// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\n\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar APOSTROPHE = '\\u2019'; /* ’ */\n\n\nfunction replaceAt(str, index, ch) {\n  return str.substr(0, index) + ch + str.substr(index + 1);\n}\n\nfunction process_inlines(tokens, state) {\n  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,\n      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,\n      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n\n  stack = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n\n    thisLevel = tokens[i].level;\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break; }\n    }\n    stack.length = j + 1;\n\n    if (token.type !== 'text') { continue; }\n\n    text = token.content;\n    pos = 0;\n    max = text.length;\n\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      t = QUOTE_RE.exec(text);\n      if (!t) { break; }\n\n      canOpen = canClose = true;\n      pos = t.index + 1;\n      isSingle = (t[0] === \"'\");\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      lastChar = 0x20;\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (tokens[j].type !== 'text') continue;\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      nextChar = 0x20;\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (tokens[j].type !== 'text') continue;\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n\n      if (canOpen && canClose) {\n        // treat this as the middle of the word\n        canOpen = false;\n        canClose = isNextPunctChar;\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          item = stack[j];\n          if (stack[j].level < thisLevel) { break; }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote);\n\n            pos += closeQuote.length - 1;\n            if (item.token === i) { pos += openQuote.length - 1; }\n\n            text = token.content;\n            max = text.length;\n\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\n\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n};\n","// Core state object\n//\n'use strict';\n\nvar Token = require('../token');\n\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n\nmodule.exports = StateCore;\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require('./rules_block/code') ],\n  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require('./rules_block/reference') ],\n  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require('./rules_block/lheading') ],\n  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'paragraph',  require('./rules_block/paragraph') ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) { break; }\n    }\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require('./rules_block/state_block');\n\n\nmodule.exports = ParserBlock;\n","// GFM table, non-standard\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      escapes = 0,\n      lastPos = 0,\n      backTicked = false,\n      lastBackTick = 0;\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x60/* ` */) {\n      if (backTicked) {\n        // make \\` close code sequence, but not open it;\n        // the reason is: `\\` is correct code block\n        backTicked = false;\n        lastBackTick = pos;\n      } else if (escapes % 2 === 0) {\n        backTicked = true;\n        lastBackTick = pos;\n      }\n    } else if (ch === 0x7c/* | */ && (escapes % 2 === 0) && !backTicked) {\n      result.push(str.substring(lastPos, pos));\n      lastPos = pos + 1;\n    }\n\n    if (ch === 0x5c/* \\ */) {\n      escapes++;\n    } else {\n      escapes = 0;\n    }\n\n    pos++;\n\n    // If there was an un-closed backtick, go back to just after\n    // the last backtick, but as if it was a normal character\n    if (pos === max && backTicked) {\n      backTicked = false;\n      pos = lastBackTick + 1;\n    }\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  ch = state.src.charCodeAt(pos++);\n  if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n  // header row will define an amount of columns in the entire table,\n  // and align row shouldn't be smaller than that (the rest of the rows can)\n  columnCount = columns.length;\n  if (columnCount > aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    token.map      = [ startLine, startLine + 1 ];\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.map      = [ startLine, startLine + 1 ];\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  token     = state.push('tbody_open', 'tbody', 1);\n  token.map = tbodyLines = [ startLine + 2, 0 ];\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    lineText = getLine(state, nextLine).trim();\n    if (lineText.indexOf('|') === -1) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n    token = state.push('tr_open', 'tr', 1);\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n  token = state.push('tbody_close', 'tbody', -1);\n  token = state.push('table_close', 'table', -1);\n\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};\n","// Code block (4 spaces padded)\n\n'use strict';\n\n\nmodule.exports = function code(state, startLine, endLine/*, silent*/) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n\n  state.line = last;\n\n  token         = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, true);\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem, token, markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  markup = state.src.slice(mem, pos);\n  params = state.src.slice(pos, max);\n\n  if (params.indexOf(String.fromCharCode(marker)) >= 0) { return false; }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n\n  token         = state.push('fence', 'code', 0);\n  token.info    = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup  = markup;\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// Block quotes\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var adjustTab,\n      ch,\n      i,\n      initial,\n      l,\n      lastLineEmpty,\n      lines,\n      nextLine,\n      offset,\n      oldBMarks,\n      oldBSCount,\n      oldIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      spaceAfterMarker,\n      terminate,\n      terminatorRules,\n      token,\n      wasOutdented,\n      oldLineMax = state.lineMax,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  // skip spaces after \">\" and re-calculate offset\n  initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);\n\n  // skip one optional space after '>'\n  if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n    // ' >   test '\n    //     ^ -- position start of line here:\n    pos++;\n    initial++;\n    offset++;\n    adjustTab = false;\n    spaceAfterMarker = true;\n  } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n    spaceAfterMarker = true;\n\n    if ((state.bsCount[startLine] + offset) % 4 === 3) {\n      // '  >\\t  test '\n      //       ^ -- position start of line here (tab has width===1)\n      pos++;\n      initial++;\n      offset++;\n      adjustTab = false;\n    } else {\n      // ' >\\t  test '\n      //    ^ -- position start of line here + shift bsCount slightly\n      //         to make extra space appear\n      adjustTab = true;\n    }\n  } else {\n    spaceAfterMarker = false;\n  }\n\n  oldBMarks = [ state.bMarks[startLine] ];\n  state.bMarks[startLine] = pos;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (isSpace(ch)) {\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n      } else {\n        offset++;\n      }\n    } else {\n      break;\n    }\n\n    pos++;\n  }\n\n  oldBSCount = [ state.bsCount[startLine] ];\n  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n  lastLineEmpty = pos >= max;\n\n  oldSCount = [ state.sCount[startLine] ];\n  state.sCount[startLine] = offset - initial;\n\n  oldTShift = [ state.tShift[startLine] ];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n  wasOutdented = false;\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    if (state.sCount[nextLine] < state.blkIndent) wasOutdented = true;\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !wasOutdented) {\n      // This line is inside the blockquote.\n\n      // skip spaces after \">\" and re-calculate offset\n      initial = offset = state.sCount[nextLine] + pos - (state.bMarks[nextLine] + state.tShift[nextLine]);\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n\n        if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n\n        pos++;\n      }\n\n      lastLineEmpty = pos >= max;\n\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n\n      break;\n    }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n","// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n","// Lists\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  var marker, pos, max, ch;\n\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  max = state.eMarks[startLine];\n\n  marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1;\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  var ch,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      pos = start,\n      max = state.eMarks[startLine];\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1; }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1; }\n\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1; }\n\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break;\n    }\n\n    return -1;\n  }\n\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i, l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\n\n\nmodule.exports = function list(state, startLine, endLine, silent) {\n  var ch,\n      contentStart,\n      i,\n      indent,\n      indentAfterMarker,\n      initial,\n      isOrdered,\n      itemLines,\n      l,\n      listLines,\n      listTokIdx,\n      markerCharCode,\n      markerValue,\n      max,\n      nextLine,\n      offset,\n      oldIndent,\n      oldLIndent,\n      oldParentType,\n      oldTShift,\n      oldTight,\n      pos,\n      posAfterMarker,\n      prevEmptyEnd,\n      start,\n      terminate,\n      terminatorRules,\n      token,\n      isTerminatingParagraph = false,\n      tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.tShift[startLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[startLine] + state.tShift[startLine];\n    markerValue = Number(state.src.substr(start, posAfterMarker - start - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n\n  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n    isOrdered = false;\n\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true; }\n\n  // Start list\n  listTokIdx = state.tokens.length;\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [ [ 'start', markerValue ] ];\n    }\n\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1);\n  }\n\n  token.map    = listLines = [ startLine, 0 ];\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  nextLine = startLine;\n  prevEmptyEnd = false;\n  terminatorRules = state.md.block.ruler.getRules('list');\n\n  oldParentType = state.parentType;\n  state.parentType = 'list';\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n\n    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    contentStart = pos;\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1; }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    token.map    = itemLines = [ startLine, 0 ];\n\n    oldIndent = state.blkIndent;\n    oldTight = state.tight;\n    oldTShift = state.tShift[startLine];\n    oldLIndent = state.sCount[startLine];\n    state.blkIndent = indent;\n    state.tight = true;\n    state.tShift[startLine] = contentStart - state.bMarks[startLine];\n    state.sCount[startLine] = offset;\n\n    if (contentStart >= max && state.isEmpty(startLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, startLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);\n\n    state.blkIndent = oldIndent;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldLIndent;\n    state.tight = oldTight;\n\n    token        = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n\n    nextLine = startLine = state.line;\n    itemLines[1] = nextLine;\n    contentStart = state.bMarks[startLine];\n\n    if (nextLine >= endLine) { break; }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    // fail if terminating block found\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n\n  listLines[1] = nextLine;\n  state.line = nextLine;\n\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};\n","'use strict';\n\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n  var ch,\n      destEndPos,\n      destEndLineNo,\n      endLine,\n      href,\n      i,\n      l,\n      label,\n      labelEnd,\n      oldParentType,\n      res,\n      start,\n      str,\n      terminate,\n      terminatorRules,\n      title,\n      lines = 0,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine],\n      nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false; }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }\n      break;\n    }\n  }\n\n  endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  terminatorRules = state.md.block.ruler.getRules('reference');\n\n  oldParentType = state.parentType;\n  state.parentType = 'reference';\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n\n  for (pos = 1; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  res = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!res.ok) { return false; }\n\n  href = state.md.normalizeLink(res.str);\n  if (!state.md.validateLink(href)) { return false; }\n\n  pos = res.pos;\n  lines += res.lines;\n\n  // save cursor state, we could require to rollback later\n  destEndPos = pos;\n  destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  res = state.md.helpers.parseLinkTitle(str, pos, max);\n  if (pos < max && start !== pos && res.ok) {\n    title = res.str;\n    pos = res.pos;\n    lines += res.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n    pos++;\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /*istanbul ignore if*/\n  if (silent) { return true; }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title: title, href: href };\n  }\n\n  state.parentType = oldParentType;\n\n  state.line = startLine + lines + 1;\n  return true;\n};\n","// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n","// lheading (---, ===)\n\n'use strict';\n\n\nmodule.exports = function lheading(state, startLine, endLine/*, silent*/) {\n  var content, terminate, i, l, token, pos, max, level, marker,\n      nextLine = startLine + 1, oldParentType,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2);\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine + 1;\n\n  token          = state.push('heading_open', 'h' + String(level), 1);\n  token.markup   = String.fromCharCode(marker);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line - 1 ];\n  token.children = [];\n\n  token          = state.push('heading_close', 'h' + String(level), -1);\n  token.markup   = String.fromCharCode(marker);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style)(?=(\\s|>|$))/i, /<\\/(script|pre|style)>/i, true ],\n  [ /^<!--/,        /-->/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n","// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n\n'use strict';\n\n\nmodule.exports = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'meta',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n];\n","// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine/*, endLine*/) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// Parser state class\n\n'use strict';\n\nvar Token = require('../token');\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction StateBlock(src, md, env, tokens) {\n  var ch, s, start, pos, len, indent, offset, indent_found;\n\n  this.src = src;\n\n  // link to parser instance\n  this.md     = md;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = [];  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent\n                       // (for example, if we are in list)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent_found = false;\n\n  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  var token = new Token(type, tag, nesting);\n  token.block = true;\n\n  if (nesting < 0) { this.level--; }\n  token.level = this.level;\n  if (nesting > 0) { this.level++; }\n\n  this.tokens.push(token);\n  return token;\n};\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  var ch;\n\n  for (var max = this.src.length; pos < max; pos++) {\n    ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, lineIndent, ch, first, last, queue, lineStart,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    lineIndent = 0;\n    lineStart = first = this.bMarks[line];\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    while (first < last && lineIndent < indent) {\n      ch = this.src.charCodeAt(first);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n\n      first++;\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n\nmodule.exports = StateBlock;\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Parser rules\n\nvar _rules = [\n  [ 'text',            require('./rules_inline/text') ],\n  [ 'newline',         require('./rules_inline/newline') ],\n  [ 'escape',          require('./rules_inline/escape') ],\n  [ 'backticks',       require('./rules_inline/backticks') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').tokenize ],\n  [ 'emphasis',        require('./rules_inline/emphasis').tokenize ],\n  [ 'link',            require('./rules_inline/link') ],\n  [ 'image',           require('./rules_inline/image') ],\n  [ 'autolink',        require('./rules_inline/autolink') ],\n  [ 'html_inline',     require('./rules_inline/html_inline') ],\n  [ 'entity',          require('./rules_inline/entity') ]\n];\n\nvar _rules2 = [\n  [ 'balance_pairs',   require('./rules_inline/balance_pairs') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').postProcess ],\n  [ 'emphasis',        require('./rules_inline/emphasis').postProcess ],\n  [ 'text_collapse',   require('./rules_inline/text_collapse') ]\n];\n\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  var i;\n\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n\n  for (i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  var ok, i, pos = state.pos,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      maxNesting = state.md.options.maxNesting,\n      cache = state.cache;\n\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n\n  if (state.level < maxNesting) {\n    for (i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n\n      if (ok) { break; }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n\n  if (!ok) { state.pos++; }\n  cache[pos] = state.pos;\n};\n\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      end = state.posMax,\n      maxNesting = state.md.options.maxNesting;\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n\n    if (state.level < maxNesting) {\n      for (i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) { break; }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break; }\n      continue;\n    }\n\n    state.pending += state.src[state.pos++];\n  }\n\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  var i, rules, len;\n  var state = new this.State(str, md, env, outTokens);\n\n  this.tokenize(state);\n\n  rules = this.ruler2.getRules('');\n  len = rules.length;\n\n  for (i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\n\n\nParserInline.prototype.State = require('./rules_inline/state_inline');\n\n\nmodule.exports = ParserInline;\n","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) { return false; }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\n\n  state.pos = pos;\n\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/\n","// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        state.pending = state.pending.replace(/ +$/, '');\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n","// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) { return false; }\n\n  pos++;\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch < 256 && ESCAPED[ch] !== 0) {\n      if (!silent) { state.pending += state.src[pos]; }\n      state.pos += 2;\n      return true;\n    }\n\n    if (ch === 0x0A) {\n      if (!silent) {\n        state.push('hardbreak', 'br', 0);\n      }\n\n      pos++;\n      // skip leading whitespaces from next line\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n\n      state.pos = pos;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += '\\\\'; }\n  state.pos++;\n  return true;\n};\n","// Parse backticks\n\n'use strict';\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, matchStart, matchEnd, token,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n\n  matchStart = matchEnd = pos;\n\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    if (matchEnd - matchStart === marker.length) {\n      if (!silent) {\n        token         = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n                                 .replace(/[ \\n]+/g, ' ')\n                                 .trim();\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += marker; }\n  state.pos += marker.length;\n  return true;\n};\n","// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      title,\n      token,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.md.inline.tokenize(state);\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      content,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    token.content  = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process autolinks '<protocol:...>'\n\n'use strict';\n\n\n/*eslint max-len:0*/\nvar EMAIL_RE    = /^<([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;\nvar AUTOLINK_RE = /^<([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)>/;\n\n\nmodule.exports = function autolink(state, silent) {\n  var tail, linkMatch, emailMatch, url, fullUrl, token,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  tail = state.src.slice(pos);\n\n  if (tail.indexOf('>') < 0) { return false; }\n\n  if (AUTOLINK_RE.test(tail)) {\n    linkMatch = tail.match(AUTOLINK_RE);\n\n    url = linkMatch[0].slice(1, -1);\n    fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += linkMatch[0].length;\n    return true;\n  }\n\n  if (EMAIL_RE.test(tail)) {\n    emailMatch = tail.match(EMAIL_RE);\n\n    url = emailMatch[0].slice(1, -1);\n    fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += emailMatch[0].length;\n    return true;\n  }\n\n  return false;\n};\n","// Process html tags\n\n'use strict';\n\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\n\nmodule.exports = function html_inline(state, silent) {\n  var ch, match, max, token,\n      pos = state.pos;\n\n  if (!state.md.options.html) { return false; }\n\n  // Check start\n  max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) { return false; }\n\n  if (!silent) {\n    token         = state.push('html_inline', '', 0);\n    token.content = state.src.slice(pos, pos + match[0].length);\n  }\n  state.pos += match[0].length;\n  return true;\n};\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\n'use strict';\n\nvar entities          = require('../common/entities');\nvar has               = require('../common/utils').has;\nvar isValidEntityCode = require('../common/utils').isValidEntityCode;\nvar fromCodePoint     = require('../common/utils').fromCodePoint;\n\n\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,8}|[0-9]{1,8}));/i;\nvar NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;\n\n\nmodule.exports = function entity(state, silent) {\n  var ch, code, match, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }\n\n  if (pos + 1 < max) {\n    ch = state.src.charCodeAt(pos + 1);\n\n    if (ch === 0x23 /* # */) {\n      match = state.src.slice(pos).match(DIGITAL_RE);\n      if (match) {\n        if (!silent) {\n          code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n          state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    } else {\n      match = state.src.slice(pos).match(NAMED_RE);\n      if (match) {\n        if (has(entities, match[1])) {\n          if (!silent) { state.pending += entities[match[1]]; }\n          state.pos += match[0].length;\n          return true;\n        }\n      }\n    }\n  }\n\n  if (!silent) { state.pending += '&'; }\n  state.pos++;\n  return true;\n};\n","// For each opening emphasis-like marker find a matching closing one\n//\n'use strict';\n\n\nmodule.exports = function link_pairs(state) {\n  var i, j, lastDelim, currDelim,\n      delimiters = state.delimiters,\n      max = state.delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    lastDelim = delimiters[i];\n\n    if (!lastDelim.close) { continue; }\n\n    j = i - lastDelim.jump - 1;\n\n    while (j >= 0) {\n      currDelim = delimiters[j];\n\n      if (currDelim.open &&\n          currDelim.marker === lastDelim.marker &&\n          currDelim.end < 0 &&\n          currDelim.level === lastDelim.level) {\n\n        // typeofs are for backward compatibility with plugins\n        var odd_match = (currDelim.close || lastDelim.open) &&\n                        typeof currDelim.length !== 'undefined' &&\n                        typeof lastDelim.length !== 'undefined' &&\n                        (currDelim.length + lastDelim.length) % 3 === 0;\n\n        if (!odd_match) {\n          lastDelim.jump = i - j;\n          lastDelim.open = false;\n          currDelim.end  = i;\n          currDelim.jump = 0;\n          break;\n        }\n      }\n\n      j -= currDelim.jump + 1;\n    }\n  }\n};\n","// Merge adjacent text nodes into one, and re-calculate all token levels\n//\n'use strict';\n\n\nmodule.exports = function text_collapse(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels\n    level += tokens[curr].nesting;\n    tokens[curr].level = level;\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n","// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  this.cache = {};        // Stores { start: end } pairs. Useful for backtrack\n                          // optimization of pairs parse (emphasis, strikes).\n\n  this.delimiters = [];   // Emphasis-like delimiters\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n\n  if (nesting < 0) { this.level--; }\n  token.level = this.level;\n  if (nesting > 0) { this.level++; }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n","'use strict';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\nfunction isString(obj) { return _class(obj) === '[object String]'; }\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\n\n\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http =  new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:':  'http:',\n  'ftp:':    'http:',\n  '//':      {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http =  new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto =  new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__   = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\n\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return; }\n\n    var compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__)\n                      .filter(function (name) {\n                        // Filter disabled & fake schemas\n                        return name.length > 0 && self.__compiled__[name];\n                      })\n                      .map(escapeRE)\n                      .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end   = self.__last_index__,\n      text  = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema    = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index     = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw       = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text      = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url       = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__           = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__          = -1;\n  this.__last_index__     = -1; // Next scan position\n  this.__schema__         = '';\n  this.__text_cache__     = '';\n\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\n  this.__compiled__       = {};\n\n  this.__tlds__           = tlds_default;\n  this.__tlds_replaced__  = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) { return false; }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__     = m[2];\n        this.__index__      = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__     = '';\n            this.__index__      = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\n        shift = me.index + me[1].length;\n        next  = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__     = 'mailto:';\n          this.__index__      = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0, result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [ list ];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n                                  .sort()\n                                  .filter(function (el, idx, arr) {\n                                    return el !== arr[idx - 1];\n                                  })\n                                  .reverse();\n\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {\n};\n\n\nmodule.exports = LinkifyIt;\n","'use strict';\n\n\nmodule.exports = function (opts) {\n  var re = {};\n\n  // Use direct extract instead of `regenerate` to reduse browserified size\n  re.src_Any = require('uc.micro/properties/Any/regex').source;\n  re.src_Cc  = require('uc.micro/categories/Cc/regex').source;\n  re.src_Z   = require('uc.micro/categories/Z/regex').source;\n  re.src_P   = require('uc.micro/categories/P/regex').source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  var text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  ////////////////////////////////////////////////////////////////////////////////\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')(?!-|_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-]).|' +  // allow `I'm_king` if no pair found\n          '\\\\.{2,3}[a-zA-Z0-9%/]|' + // github has ... in commit range links. Restrict to\n                                     // - english\n                                     // - percent-encoded\n                                     // - parts of file path\n                                     // until more examples found.\n          '\\\\.(?!' + re.src_ZCc + '|[.]).|' +\n          (opts && opts['---'] ?\n            '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            :\n            '\\\\-+|'\n          ) +\n          '\\\\,(?!' + re.src_ZCc + ').|' +      // allow `,,,` in paths\n          '\\\\!(?!' + re.src_ZCc + '|[!]).|' +\n          '\\\\?(?!' + re.src_ZCc + '|[?]).' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]+';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/*_root*/ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Main rules\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\\\\(|' + re.src_ZCc + ')(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re;\n};\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","// markdown-it default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   100            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","// Commonmark default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         true,         // Enable HTML tags in source\n    xhtmlOut:     true,         // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'text_collapse'\n      ]\n    }\n  }\n};\n"],"sourceRoot":""}